"""
1. прибавь 1

2. сделай нечётное

 

Первая из этих команд увеличивает число x на экране на 1, вторая переводит число x в число 2x+1. Например, вторая команда переводит число 10 в число 21. Программа для исполнителя НечетМ – это последовательность команд. Сколько существует таких программ, которые число 1 преобразуют в число 27, причём траектория вычислений не содержит число 26? Траектория вычислений программы – это последовательность результатов выполнения всех команд программы. Например, для программы 121 при исходном числе 7 траектория будет состоять из чисел 8, 17, 18.
"""
 def f(x, y):
    if x > y or x == 26:
        return 0
    if x == y:
        return 1
    else:
        return f(x + 1, y) + f(x * 2 + 1, y)
print(f(1,27))


"""
1.  Прибавить 1

2.  Прибавить 2

3.  Умножить на 2

Первая из них увеличивает число на экране на 1, вторая увеличивает его на 2, третья умножает его на 2.

Программа для исполнителя А16 – это последовательность команд.

Сколько существует таких программ, которые исходное число 3 преобразуют в число 12 и при этом траектория вычислений программы содержит число 10?
"""
 def f(x, y): 
    if x > y:
        return 0
    if x == y:
        return 1
    else:
        return f(x + 1, y) + f(x + 2, y) + f(x * 2, y)
print(f(3, 10) * f(10, 12))

"""
1.  Прибавить 1

2.  Прибавить 2

Первая команда увеличивает число на экране на 1, вторая увеличивает его на 2.

Программа для исполнителя Фибо  — это последовательность команд.

Сколько существует программ, которые преобразуют исходное число 3 в число 20 и при этом траектория вычислений содержит число 9 и не содержит числа 15?
"""
 def f(x, y): 
    if x > y or x == 15:
        return 0
    if x == y:
        return 1
    else:
        return f(x + 1, y) + f(x + 2, y)
print(f(3, 9) * f(9, 20))

"""
1.  прибавь 2,

2.  умножь на 5.

 

Первая из них увеличивает число на экране на 2, вторая  — увеличивает его в 5 раз.

Программа для Калькулятора  — это последовательность команд.

Сколько есть программ, которые число 2 преобразуют в число 50?
"""
 def f(x, y):
    if x == y: 
        return 1
    if x > y: 
        return 0
    return f(x + 2, y)+f(x * 5, y)
print(f(2, 50))

"""
Исполнитель Увеличитель преобразует число на экране.
У исполнителя есть две команды, которым присвоены номера:
1. Вычти 2
2. Найди целую часть от деления на 2
Первая из них уменьшает число на экране на 2, вторая заменяет число на экране на целую часть от деления числа на 2.
Программа для исполнителя — это последовательность команд.
При исходном числе 80 результатом является число 1, и при этом траектория вычислений содержит число 40 и не содержит 20.
Сколько таких программ существует?
Траектория вычислений программы — это последовательность результатов выполнения всех команд программы.
Например, для программы 122 при исходном числе 10 траектория состоит из чисел 8, 4, 2.
"""
count = 0


def F(n, path):
    global count
    npath = path + [n]
    if n == 1 and 40 in npath and 20 not in npath:
        count += 1
        print(count, npath)
    if n < 1:
        return
    F(n - 2, npath)
    F(n // 2, npath)


F(80, [])
print(count)

"""
Исполнитель преобразует число, записанное на экране.
У исполнителя есть команды, которым присвоены номера:
1.Прибавить 1
2.Прибавить 3
3.Умножить на 3.
Первая команда увеличивает число на экране на 1, вторая — на 3, третья — увеличивает число в 3 раза.
Сколько существует программ, для которых при исходном числе 7 результатом является число 20 
и при этом траектория содержит число 14 и не содержит 15?
"""

count = 0


def F(n, path):
    global count
    npath = path + [n]
    if n == 1 and 40 in npath and 20 not in npath:
        count += 1
        print(count, npath)
    if n < 1:
        return
    F(n - 2, npath)
    F(n // 2, npath)


F(80, [])
print(count)