Оценка скорости выполенения алгоритма(О)

Рекурсивная функция - О(N)
Линейная функция - O(N) пример : n = int(input()) for i in range(n): print(n)

Big O описывает только скорость роста

Поэтому мы отбрасываем константы при оценке сложностей (O(2N) =  O(N))

Пример:
O(N**2 + N), N значение меньше чем N**2 , то есть ей можно принебречь:
O(N**2 + N) = O(N ** 2)
O(N + logN) = O(N)
O(N**2 + B) = O(N**2 + B) , так как мы ничего не знаем про B

for i in range(len(A)):
    print(i)
for j in range(len(B)):
    print(j)
Ассимпт данной программы  - O(A + B)

for i in range(len(A)):
    for j in range(len(B)):
        print(i,j)
Ассимт данной программы - O(A * B)

сложность по памяти (M(...)) для рекурсивных функций -  O(N)
сложность по памяти для нерекурсивных функций - O(N)

сложность по памяти для конкотенации строк - O(2 ** N)



ДИНАМИЧЕСКИЙ МАССИВ РЕАЛИЗАЦИЯ :

class DynamicArray:
    def __init__(self):
        self._capacity = 1  # Начальная емкость массива
        self._size = 0  # Текущий размер массива
        self._array = self._make_array(self._capacity)  # Создание массива фиксированной емкости

    def _make_array(self, capacity):
        """Создает новый массив фиксированной емкости."""
        return [None] * capacity

    def __len__(self):
        """Возвращает количество элементов в массиве."""
        return self._size

    def __getitem__(self, index):
        """Возвращает элемент по индексу."""
        if 0 <= index < self._size:
            return self._array[index]
        else:
            raise IndexError('Index out of bounds')

    def __setitem__(self, index, value):
        """Изменяет элемент по индексу."""
        if 0 <= index < self._size:
            self._array[index] = value
        else:
            raise IndexError('Index out of bounds')

    def append(self, value):
        """Добавляет элемент в конец массива."""
        if self._size == self._capacity:
            self._resize(2 * self._capacity)  # Увеличиваем емкость массива вдвое
        self._array[self._size] = value
        self._size += 1

    def insert(self, index, value):
        """Вставляет элемент по указанному индексу."""
        if index < 0 or index > self._size:
            raise IndexError('Index out of bounds')

        if self._size == self._capacity:
            self._resize(2 * self._capacity)

        for i in range(self._size, index, -1):
            self._array[i] = self._array[i - 1]
        
        self._array[index] = value
        self._size += 1

    def remove(self, value):
        """Удаляет первое вхождение элемента из массива."""
        for i in range(self._size):
            if self._array[i] == value:
                for j in range(i, self._size - 1):
                    self._array[j] = self._array[j + 1]
                self._array[self._size - 1] = None
                self._size -= 1
                if self._size > 0 and self._size == self._capacity // 4:
                    self._resize(self._capacity // 2)
                return
        raise ValueError('Value not found in array')

    def _resize(self, new_capacity):
        """Изменяет емкость массива."""
        new_array = self._make_array(new_capacity)
        for i in range(self._size):
            new_array[i] = self._array[i]
        self._array = new_array
        self._capacity = new_capacity

    def __str__(self):
        """Возвращает строковое представление массива."""
        return str([self._array[i] for i in range(self._size)])

РЕАЛИЗАЦИЯ СТЕКА:
class Stack:
    def __init__(self):
        self._items = []

    def is_empty(self):
        """Проверяет, пуст ли стек."""
        return len(self._items) == 0

    def push(self, item):
        """Добавляет элемент в вершину стека."""
        self._items.append(item)

    def pop(self):
        """Удаляет и возвращает элемент из вершины стека."""
        if self.is_empty():
            raise IndexError('pop from empty stack')
        return self._items.pop()

    def peek(self):
        """Возвращает элемент из вершины стека, не удаляя его."""
        if self.is_empty():
            raise IndexError('peek from empty stack')
        return self._items[-1]

    def size(self):
        """Возвращает количество элементов в стеке."""
        return len(self._items)

    def __str__(self):
        """Возвращает строковое представление стека."""
        return str(self._items)

РЕАЛИЗАЦИЯ ОЧЕРЕДИ :

class Queue:
    def __init__(self):
        self._items = []

    def is_empty(self):
        """Проверяет, пуста ли очередь."""
        return len(self._items) == 0

    def enqueue(self, item):
        """Добавляет элемент в конец очереди."""
        self._items.append(item)

    def dequeue(self):
        """Удаляет и возвращает элемент из начала очереди."""
        if self.is_empty():
            raise IndexError('dequeue from empty queue')
        return self._items.pop(0)

    def peek(self):
        """Возвращает элемент из начала очереди, не удаляя его."""
        if self.is_empty():
            raise IndexError('peek from empty queue')
        return self._items[0]

    def size(self):
        """Возвращает количество элементов в очереди."""
        return len(self._items)

    def __str__(self):
        """Возвращает строковое представление очереди."""
        return str(self._items)
                                                            КВАДРАТИЧНЫЕ СОРТИРОВКИ


1. Поиск Максимума
def large(arr):
    max_ = arr[0]
    for ele in arr:
        if ele > max_:
           max_ = ele
    return max_
list1 = [1,4,5,2,6]
result = large(list1)
print(result)  # вернется 6
Лучшее время работы этого алгоритма - O(n), худшее время работы также - O(n), а затраты памяти составляют O(1)

2.Сортировка выбором(Selection sort)

# Selection sort in Python
# time complexity O(n*n)
# sorting by finding min_index
def selectionSort(array, size):
    for ind in range(size):
        min_index = ind

        for j in range(ind + 1, size):
            # select the minimum element in every iteration
            if array[j] < array[min_index]:
                min_index = j
        # swapping the elements to sort the array
        (array[ind], array[min_index]) = (array[min_index], array[ind])

Лучшее время работы: O(n^2), возникает, когда массив уже отсортирован.
Худшее время работы: O(n^2), возникает, когда массив отсортирован в обратном порядке.
Затраты памяти: O(1), так как алгоритм сортировки выбором не требует дополнительной памяти, за исключением временной переменной, используемой для обмена элементов.

3.Insertion sort(Сортировка вставками)

def insertionSort(arr):
    n = len(arr)  # Получение длины массива

    if n <= 1:
        return  # Если массив содержит 0 или 1 элемент, он уже отсортирован, поэтому return

    for i in range(1, n):  # Итерация по массиву, начиная со второго элемента
        key = arr[i]  # Сохраните текущий элемент в качестве ключа, который будет вставлен в нужную позицию
        j = i - 1
        while j >= 0 and key < arr[j]:  # Переместите элементы, превышающие ключ, на одну позицию вперед
            arr[j + 1] = arr[j]  # Сдвиг элементов вправо
            j -= 1
        arr[j + 1] = key  # Вставляем ключ в нужную позицию
Лучшее время работы: O(n), возникает, когда элементы уже отсортированы.
Худшее время работы: O(n^2), возникает, когда элементы отсортированы в обратном порядке.
Затраты памяти: O(1), так как алгоритм сортировки вставкой выполняется в том же массиве, не требуя дополнительной памяти


Рекурсивный метод:

# Рекурсивная программа Python для сортировки вставкой

# Рекурсивная функция для сортировки массива с помощью сортировки вставкой
def insertionSortRecursive(arr, n):
	# базовый случай
    if n <= 1:
		return

	# Сортировка первых n-1 элементов
	insertionSortRecursive(arr, n - 1)

	# Вставляем последний элемент на его правильную позицию в отсортированном массиве.
	last = arr[n - 1]
	j = n - 2

	# Перемещаем элементы массива arr[0..i-1], которые
	# больше, чем ключ, на одну позицию вперед
	# от их текущей позиции
	while (j >= 0 и arr[j] > last):
		arr[j + 1] = arr[j]
		j = j - 1
	arr[j + 1] = last

4. Bubble sort


def bubbleSort(arr):
    n = len(arr)
    # оптимизируем код, так что если массив уже отсортирован, то не нужно
    # проходить через весь процесс
    swapped = False
    # Пройтись по всем элементам массива
    for i in range(n - 1):
        # range(n) тоже работает, но внешний цикл будет
        # повторяться на один раз больше, чем нужно.
        # Последние i элементов уже находятся на месте
        for j in range(0, n - i - 1):

            # обходим массив от 0 до n-i-1
            # Поменяйте местами, если найденный элемент больше
            # чем следующий элемент
            if arr[j] > arr[j + 1]:
                swapped = True
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

Для сортировки пузырьком (bubble sort) в Python:
Лучшее время работы: O(n), возникает, когда массив уже отсортирован.
Худшее время работы: O(n^2), возникает, когда массив отсортирован в обратном порядке.
Затраты памяти: O(1), так как алгоритм сортировки пузырьком не требует дополнительной памяти, за исключением временной переменной, используемой для обмена элементов

5.Merge sort

def merge(L, R):
    index_L = 0
    index_R = 0
    res = []  # Создаем пустой массив для объединения
    while index_L < len(L) and index_R < len(R):
        if L[index_L] < R[index_R]:
            res.append(L[index_L])  # Добавляем элемент из L в результирующий массив
            index_L += 1
        else:
            res.append(R[index_R])  # Добавляем элемент из R в результирующий массив
            index_R += 1
    while index_L < len(L):
        res.append(L[index_L])  # Добавляем оставшиеся элементы из L
        index_L += 1
    while index_R < len(R):
        res.append(R[index_R])  # Добавляем оставшиеся элементы из R
        index_R += 1
    return res

def mergeSort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]
        mergeSort(L)
        mergeSort(R)
        arr.clear()
        arr += merge(L, R)


Лучшее время работы: O(n log n), возникает, когда массив уже отсортирован или содержит один элемент.
Худшее время работы: O(n log n), возникает, когда массив отсортирован в обратном порядке.
Затраты памяти: O(n), так как алгоритм сортировки слиянием требует дополнительной памяти для объединения подмассивов


6.Quick sort
def partition(arr, L, R):
    pivot = arr[L] # arr[R] arr[(L + R) / 2] arr[rand(L,R)]
    left, right = L, R
    while left < right:
        while arr[left] < pivot:
            left += 1
        while arr[right] > pivot:
            right -= 1
        if left < right:
            arr[right], arr[left] = arr[left], arr[right]
    return left

def Quick_Sort(arr, L, R):
    if L < R:
        mid = partition(arr, L, R)
        Quick_Sort(arr, L, mid - 1)
        Quick_Sort(arr, mid + 1, R)

arr = [64, 25, 12, 22, 11]
Quick_Sort(arr, 0, len(arr) - 1)
print("Отсортированный массив:", arr)
Лучшее время работы: O(n log n), возникает, когда выбор опорного элемента делит массив на примерно равные части.
Худшее время работы: O(n^2), возникает, когда выбор опорного элемента приводит к несбалансированным разделениям.
Затраты памяти: O(log n) в среднем случае, O(n) в худшем случае из-за рекурсивных вызовов


7.Counting sort


def count_sort(input_array):
    # Нахождение максимального элемента массива input_array.
    M = max(input_array)

    # Инициализация count_array значением 0
    count_array = [0] * (M + 1)

    # Сопоставление каждого элемента массива input_array с индексом массива count_array
    for num in input_array:
        count_array[num] += 1

    # Вычисление префиксной суммы по каждому индексу массива count_array
    for i in range(1, M + 1):
        count_array[i] += count_array[i - 1]

    # Создание массива output_array из массива count_array
    output_array = [0] * len(input_array)

    for i in range(len(input_array) - 1, -1, -1):
        output_array[count_array[input_array[i]] - 1] = input_array[i]
        count_array[input_array[i]] -= 1

    return output_array

Лучшее время работы сортировки подсчётом - O(n + k), где n - количество элементов в массиве, k - диапазон сортируемых значений обозначает разницу между минимальным и максимальным значением в сортируемом массиве.. Худшее время работы - также O(n + k). Затраты памяти составляют O(n + k)
Затраты памяти также O(n + k)


DFS AND BFS:

from collections import deque
from typing import Optional
class TreeNode:
    def __init__(self,val = 0,left =None,right = None):
        self.val = val
        self.left = left
        self.right = right
root = TreeNode(val = "A")
root.left = TreeNode(val = "B")
root.right = TreeNode(val = "C")
root.left.left = TreeNode(val = "D")
root.left.right = TreeNode(val = "E")
root.right.left = TreeNode(val = "F")
root.right.right = TreeNode(val = "G")

def bfs(root: TreeNode):
    q = deque()
    q += [root]
    while q:
        for _ in range(len(q)):
            node = q.popleft()
            if node is not None:
                print(node.val, end=" ")
                q += [node.left]
                q += [node.right]

def dfs(root : TreeNode):
    if root is None:
        return
    print(root.val, end=" ")
    if root.left:
        dfs(root.left)
    if root.right:
        dfs(root.right)


bfs(root)
print()
dfs(root)

bfs Асимптотика  - O(N+ m) -  сумма вершин и ребер, у dfs такая же асимптотика 
bfs нужен для нахождения кратчайшего расстояния

АЛГОРИТМ ДЕЙКСТРА:

import heapq

def dijkstra(graph, start):
    # Инициализация
    queue = []
    heapq.heappush(queue, (0, start))
    distances = {vertex: float('infinity') for vertex in graph}
    distances[start] = 0
    previous_vertices = {vertex: None for vertex in graph}

    while queue:
        current_distance, current_vertex = heapq.heappop(queue)

        # Узел уже обработан
        if current_distance > distances[current_vertex]:
            continue

        # Обход всех соседей текущей вершины
        for neighbor, weight in graph[current_vertex].items():
            distance = current_distance + weight

            # Найден более короткий путь к соседу
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_vertices[neighbor] = current_vertex
                heapq.heappush(queue, (distance, neighbor))

    return distances, previous_vertices

# Пример использования
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}

start_vertex = 'A'
distances, previous_vertices = dijkstra(graph, start_vertex)

print("Кратчайшие расстояния от вершины", start_vertex, "до всех остальных:")
for vertex, distance in distances.items():
    print(vertex, ":", distance)

  BINARY_Search:


def binarySearch(arr, low, high, x):

    while low <= high:

        mid = low + (high - low) // 2

        # Check if x is present at mid
        if arr[mid] == x:
            return mid

        # If x is greater, ignore left half
        elif arr[mid] < x:
            low = mid + 1

        # If x is smaller, ignore right half
        else:
            high = mid - 1

    # If we reach here, then the element
    # was not present
    return -1

НОП 
 Заполнение массива :
dp[i][j] = ( 0, if i = 0 or j = 0 ; dp[i-1][j-1] + 1, if x[i] == y[j]; max(dp[i-1][j],dp[i][j-1]), if x[i] != y[j])



НВП(n- size, a - arr , d - 2 arr)
Поиск:
for i = 0 to n-1
      d[i] = 1
      for j = 0 to i - 1
            if (a[j] < a[i] and d[j] + 1 > d[i])
                   d[i] = d[j] + 1
max_len = max(d)
Асимптотика - O(n* 2), но можно за O(n * log(n))

 